"civet jsxCodeNested"

solid-js import { createSignal, For, Index }
solid-js/store import { createStore }
@thisbeyond/solid-dnd import {
  DragDropProvider
  DragDropSensors
  DragEventHandler
}

./color.civet import { colors, setColors }
./Glue.civet import { Glue }
./Tile.civet import { Tile, type Prototile }
./examples.civet import { examples }
./ThreeTiles.civet import { ThreeTiles }

export function App()
  [tiles, setTiles] := createStore<Prototile[]> examples.aperiodic
  [numTiles, setNumTiles] := createSignal tiles#
  glues := colors

  function onDragEnd({draggable, droppable})
    return unless droppable
    setTiles droppable.id %/ 4, droppable.data, draggable.id

  <DragDropProvider {onDragEnd}>
    <DragDropSensors>
    <h1>Wang Tiles → Three Tiles
      <span style="font-size: smaller; margin-left: 1em">[<a href="https://arxiv.org/abs/2409.11582">paper</a>] [<a href="https://github.com/edemaine/three-tiles/">source code on GitHub</a>]
    <hr>
    <h2>Input: Wang Tiles
    <h3>{glues()} Glues
    <.glues>
      <button onClick=
        (e) => setColors Math.max 2, . %/ 2
      >−
      <button onClick=
        (e) => setColors (2*)
      >+
      <For each=[0...glues()]>
        (glue) =>
          <Glue color=glue>
    <h3>{tiles#} Tiles
    <.tiles>
      <button onClick=
        (e) => setNumTiles Math.max 1, . - 1
      >−
      <button onClick=
        (e) =>
          setNumTiles (1+)
          if numTiles() > tiles#
            setTiles tiles#, {...tiles.-1}
      >+
      <Index each=tiles[..<numTiles()]>
        (tile, id) =>
          <Tile {tile(), id}>
    <hr>
    <h2>Output: Three Tiles
    <ThreeTiles {glues()} tiles=tiles[..<numTiles()]>
