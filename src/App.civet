from solid-js import { createMemo, createSelector, createSignal, For, Index }
from solid-js/store import { createStore }
from @thisbeyond/solid-dnd import {
  DragDropProvider
  DragDropSensors
  DragEventHandler
}

from ./color.civet import { colors, setColors }
from ./Glue.civet import { Glue, SignedGlue }
from ./Tile.civet import { Tile, SignedTile, type Prototile }
from ./examples.civet import { examples }
from ./ThreeTiles.civet import { unsignedToSigned, ThreeTiles }

export function App()
  [tiles, setTiles] := createStore<Prototile[]> examples.aperiodic
  [numTiles, setNumTiles] := createSignal tiles#
  glues := colors
  [zoom, setZoom] := createSignal 1
  [selected, setSelected] := createSignal<number?>()
  isSelected := createSelector selected
  signed := createMemo => unsignedToSigned tiles[..<numTiles()], glues()

  function onDragEnd({draggable, droppable}): void
    return unless droppable
    setTiles droppable.id %/ 4, droppable.data, draggable.id

  function downloadTiles(query: string, size = 50): void
    margin := 10
    count .= 0
    let viewBox: string
    text .=
      for join each tile of document.querySelectorAll `${query} svg.tile`
        tile.outerHTML
        .replace /\s*viewBox="([^"]*)"/, (m, ^viewBox) => ''
        .replace /<svg/, `<g transform="translate(${(size + margin) * count++})"`
        .replace /<\/svg>/, `</g>`
    dims := viewBox!.split(/\s+/).filter(&)
    text = ```
      ${svgHeader}
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="${dims[0]} ${dims[1]} ${size * count + margin * (count-1)} ${size}">
      <style>
      .background { fill: gray; }
      .glue { stroke-width: 1.5; stroke-linejoin: round; }
      </style>
      ${text}
      </svg>
    ```
    svgDownload text, 'tiles'

  <DragDropProvider {onDragEnd}>
    <DragDropSensors>
    <h1>Wang Tiles ‚Üí Three Tiles
      <span .postfix>[<a href="https://arxiv.org/abs/2409.11582">paper</a>] [<a href="https://github.com/edemaine/three-tiles/">source code on GitHub</a>]
    <hr>
    <h2>Input: Wang Tiles
    <h3>{glues()} Glues
      <span .postfix .em>(drag from here)
    <.glues>
      <button title="Halve the number of glues" onClick=
        (e) => setColors Math.max 2, . %/ 2
      >‚àí
      <button title="Double the number of glues" onClick=
        (e) => setColors (2*)
      >+
      <For each=[0...glues()]>
        (glue) =>
          <Glue color=glue>
    <h3>{numTiles()} Tiles
      <span .postfix .em>(drag to here)
      <button .postfix onClick=
        (e) => downloadTiles '.tiles.input'
      >SVG
    <.tiles .input>
      <button title="Remove last Wang tile" onClick=
        (e) => setNumTiles Math.max 1, . - 1
      >‚àí
      <button title="Add a Wang tile" onClick=
        (e) =>
          setNumTiles (1+)
          if numTiles() > tiles#
            setTiles tiles#, {...tiles.-1}
      >+
      <Index each=tiles[..<numTiles()]>
        (tile, id) =>
          <Tile {tile(), id}
          selected={isSelected id} onClick={=> setSelected id}>
    <hr>
    <h2>Intermediate: Signed Tiles
    <h3>{signed().glues} Glues with 2 Different Signs
    <.glues>
      <For each=[1..signed().glues]>
        (glue) =>
          <SignedGlue color=glue glues=signed().glues>
          <SignedGlue color=-glue glues=signed().glues>
    <h3>{signed().tiles#} Tiles
      <span .postfix .em>(click to rotate wheel to this tile)
      <button .postfix onClick=
        (e) => downloadTiles '.tiles.intermediate', 60
      >SVG
    <.tiles .intermediate>
      <Index each=signed().tiles>
        (tile, id) =>
          <SignedTile {tile(), signed().glues}
          selected={isSelected id} onClick={=> setSelected id}>
    <hr>
    <h2>Output: Three Tiles
      <span .postfix>üîç
        <button title="Zoom in" onClick=
          (e) => setZoom (2*)
        >+
        <button title="Zoom out" onClick=
          (e) => setZoom (/2)
        >‚àí
      <span .postfix>
        <label>
          <input type="checkbox" checked onClick=
            (e) => document.documentElement.classList.toggle
              "hideGlues", not e.currentTarget.checked
          >
          Show glues
      <button .postfix onClick=
        (e) => svgDownload
          svgHeader + svgToText document.querySelector('.container > svg')!
          'three'
      >SVG
    <div .container>
      <ThreeTiles {zoom()} selected={selected() ?? 0} ...signed()>

svgHeader := `<?xml version="1.0" encoding="utf-8"?>\n`
function svgToText(root: Element): string
  root.outerHTML
  .replace /<svg/, `<svg xmlns="http://www.w3.org/2000/svg" version="1.1"`

function svgDownload(text: string, filename: string): void
  url := URL.createObjectURL new Blob [text], type: 'image/svg+xml'
  document.createElement 'a'
  ||> .style.display = 'none'
  ||> document.documentElement.appendChild
  ||> .href = url
  ||> .download = filename + '.svg'
  ||> .click() // synchronous
  ||> .href = ''
  ||> document.documentElement.removeChild
  URL.revokeObjectURL url
