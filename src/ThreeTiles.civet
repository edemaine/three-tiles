from solid-js import { createMemo, For, type JSX }
operator { max } := Math
from @solid-primitives/tween import { createTween }

from ./Tile.civet import { type Prototile, tileSize, tabWidth, tabDepth }
from ./Turtle.civet import { Turtle, cos, sin, Polygon }
from ./color.civet import { color }

l := 1.5
eps2 := 5
eps3 := 5
eps1 := eps2 + eps3

function staple(t: Turtle): Turtle
  t
  //.f l * (2 - cos(eps3) + sin(eps1))
  .l 90 + eps1
  .f l
  .r 90 + eps2
  .f l
  .r 90 + eps3
  .f 2 * l * (cos(eps1) + sin(eps3))
  .r 90 + eps3
  .f l
  // Closing:
  //.r 90 + eps2
  //.f l

function tweedledee(t: Turtle): Turtle
  t
  .f l * (2 - cos(eps3) + sin(eps1))
  .l 90 + eps1
  .f l
  .r 90 + eps2
  .f l
  .r 90 + eps3
  .f 2 * l * (cos(eps1) + sin(eps3))
  .l 90 + eps3
  .f l
  .l 90 + eps2
  .f l
  .r 90 + eps1
  .f l * (2 - cos(eps3) + sin(eps1))

function tweedledum(t: Turtle): Turtle
  t
  .f l * (2 - cos(eps3) + sin(eps1))
  .r 90 + eps1
  .f l
  .l 90 + eps2
  .f l
  .l 90 + eps3
  .f 2 * l * (cos(eps1) + sin(eps3))
  .r 90 + eps3
  .f l
  .r 90 + eps2
  .f l
  .l 90 + eps1
  .f l * (2 - cos(eps3) + sin(eps1))

aroundGlueGap := (n: number) => n*l
midGlueGap := 1.5*l
//aroundGlueGap := 5*l
//midGlueGap := 4*l

function wheel(t: Turtle, tiles: Prototile[], nBits: number): Turtle[]
  glues: Turtle[] := []

  function glue(g: number)
    bitString .=
    Math.abs(g) - 1 // map positive/negative glue to nonnegative color
    |> .toString 2  // binary representation
    |> .padStart nBits, '0' // exactly nBits long
    // Convert string to array of numbers
    bits := for each bit of bitString
      Number bit
    if g > 0
      bits.unshift 0, 0
      bits.push 0, 1
    else
      bits.unshift 1, 0
      bits.push 0, 0

    // Colored glue polygon
    bisector := 90 - 45 / tiles#
    tGlue := t.clone()
    .fill color Math.abs(g) - 1, 1 << nBits
    .stroke "black"

    t.f aroundGlueGap tiles#
    for each bit, i of bits
      t.f midGlueGap unless i is 0
      if bit is 0
        tweedledee t
      else // bit is 1
        tweedledum t
    t.f aroundGlueGap tiles#

    tGlue.r 90 - 45 / tiles#
    tGlue.f aroundGlueGap tiles#
    tAfter := t.clone()
    tAfter.r 90 + 45 / tiles#
    tAfter.f aroundGlueGap tiles#
    d := tAfter.distance tGlue.x, tGlue.y
    tGlue.f aroundGlueGap tiles#
    tGlue.l 180
    tGlue.reset()
    tGlue.f aroundGlueGap tiles#
    tGlue.r 90 + 45 / tiles#

    // Tab/pocket
    //tGlue.f d
    tGlue.f d/2 * (1 - tabWidth/tileSize)
    sign := Math.sign g
    tGlue.l sign * 90
    tGlue.f d/2 * tabDepth/tileSize
    tGlue.r sign * 90
    tGlue.f d/2 * 2*tabWidth/tileSize
    tGlue.r sign * 90
    tGlue.f d/2 * tabDepth/tileSize
    tGlue.l sign * 90
    tGlue.f d/2 * (1 - tabWidth/tileSize)

    tGlue.r 90 + 45 / tiles#
    tGlue.f aroundGlueGap tiles#
    glues.push tGlue

  for each dir of ['n', 'e', 's', 'w'] as const
    for each tile of tiles
      glue tile[dir]
      t.r 90 / tiles#

  [t, ...glues]

function notch(t: Turtle): Turtle
  t
  .f l * (2 - cos(eps3) + sin(eps1))
  .l (90 + eps1)
  .f l
  .r 90 + eps2
  .f l
  .r 2 * eps3
  .f l
  .r 90 + eps2
  .f l
  .l 90 + eps1
  .f l * (2 - cos(eps3) + sin(eps1))

function shuriken(t: Turtle, nTiles: number, nBits: number): Turtle
  for [1..4] // directions
    for i of [2..nTiles]
      t
      .r 90 / nTiles
      .f aroundGlueGap nTiles
      for each i of [0...nBits + 4] // 4 to compensate for padding
        t.f midGlueGap unless i is 0
        notch t
      t.f aroundGlueGap nTiles
    t.l 180 - 90 / nTiles
  t

function ceilLog2(glues: number): number
  nBits .= 1
  maxVal .= 2
  while maxVal < glues
    nBits++
    maxVal <<= 1
  nBits

export function unsignedToSigned(tiles: Prototile[], glues: number): {tiles: Prototile[], glues: number}
  // Remove aliasing
  tiles = for each tile of tiles
    {...tile}
  // Glues wrap around
  for each tile of tiles
    tile.w %%= glues
    tile.e %%= glues
    tile.s %%= glues
    tile.n %%= glues
  // Remove overlap from horizontal and vertical glues
  hGlues := new Set (tile.w for each tile of tiles) ++
                    (tile.e for each tile of tiles)
  vGlues := new Set (tile.n for each tile of tiles) ++
                    (tile.s for each tile of tiles)
  maxGlue .= for max glue of hGlues.union vGlues
  for glue of hGlues.intersection vGlues
    // Map glue -> maxGlue (new glue number)
    maxGlue++
    for each tile of tiles
      tile.w = maxGlue if tile.w is glue
      tile.e = maxGlue if tile.e is glue
  glues max= maxGlue + 1
  // Sign glues, and avoid zero, because -0 is messy
  for each tile of tiles
    tile.w = -(tile.w + 1)
    tile.e = +(tile.e + 1)
    tile.s = -(tile.s + 1)
    tile.n = +(tile.n + 1)
  {tiles, glues}

margin := 1
//tileGap := 3 * l
export function ThreeTiles(props: {tiles: Prototile[], glues: number, zoom: number, selected: number})
  polys := createMemo =>
    {tiles, glues} := props
    nBits := ceilLog2 glues
    staplePoly := new Turtle |> staple |> .shift() |> .fill "yellow"
    [wheelPoly, ...gluePolys] := new Turtle()
    |> .fill "#9142c3"
    |> wheel ., tiles, nBits
    for each poly of gluePolys
      poly |> .shift 0, 0, wheelPoly
    wheelPoly.shift()
    shurikenPoly := new Turtle |> shuriken ., tiles#, nBits
    |> .shift()
    |> .fill "green"
    shurikenPoly.shift
      wheelPoly.maxX() - shurikenPoly.maxX()/2 - l * (cos(eps1) + sin(eps3))
      wheelPoly.maxY() - shurikenPoly.maxY()/2 - l * (cos(eps1) + sin(eps3))
    {staplePoly, wheelPoly, gluePolys, shurikenPoly}

  angle := createTween
    => -props.selected * 90 / props.tiles#
    {}
      duration: 1000
      ease: (t) => 0.5 - Math.cos(Math.PI * t) / 2
  center := createMemo =>
    `${polys().wheelPoly.maxX()/2} ${polys().wheelPoly.maxY()/2}`

  <svg viewBox=`${-margin} ${-margin} ${polys().shurikenPoly.maxX() + 2*margin} ${polys().shurikenPoly.maxY() + 2*margin}` width=`${props.zoom*100}%`>
    <Polygon .ptile turtle=polys().staplePoly>
    <g transform=`rotate(${angle()} ${center()})`>
      <Polygon .ptile turtle=polys().wheelPoly>
      <For each=polys().gluePolys>
        (poly) =>
          <Polygon .pglue turtle=poly>
    <Polygon .ptile turtle=polys().shurikenPoly>
